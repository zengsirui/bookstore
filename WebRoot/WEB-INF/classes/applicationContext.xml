<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop" xmlns="http://www.springframework.org/schema/beans" xmlns:tx="http://www.springframework.org/schema/tx" xsi:schemaLocation="http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd ">
  <!-- 扫描哪个包下（包含子包）的类包含bean的注解 -->
	<context:component-scan base-package="cn.edu.hbpu.bookstore"></context:component-scan>
	<!-- 开启注解，完成AOP配置 -->
	<!-- <aop:aspectj-autoproxy></aop:aspectj-autoproxy> -->
	<!--读取连接数据库的属性信息文件db.properties  -->
	
	
	<context:property-placeholder location="classpath:db.properties"/>
	<!-- 使用C3p0连接池 建立数据库的连接DataSource -->
	<bean name="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driverClassName}"></property>
		<property name="user" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<property name="jdbcUrl" value="${jdbc.url}"></property>
	</bean>
	
	
	
	
	
	
	 <!-- 使用C3p0的DataSource建立JdbcTemplate -->
	<bean name="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<bean name="transactionManager" 
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- 配置通知 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" isolation="REPEATABLE_READ" read-only="false"/>
			<tx:method name="insert*" propagation="REQUIRED" isolation="REPEATABLE_READ" read-only="false"/>
			<tx:method name="persist*" propagation="REQUIRED" isolation="REPEATABLE_READ" read-only="false"/>
			<tx:method name="update*" propagation="REQUIRED" isolation="REPEATABLE_READ" read-only="false"/>
			<tx:method name="modify*" propagation="REQUIRED" isolation="REPEATABLE_READ" read-only="false"/>
			<tx:method name="delete*" propagation="REQUIRED" isolation="REPEATABLE_READ" read-only="false"/>
			<tx:method name="remove*" propagation="REQUIRED" isolation="REPEATABLE_READ" read-only="false"/>
			<tx:method name="get*" propagation="REQUIRED" isolation="REPEATABLE_READ" read-only="false"/>
			<tx:method name="find*" propagation="REQUIRED" isolation="REPEATABLE_READ" read-only="false"/>
		</tx:attributes>	
	</tx:advice>
	
	<!-- 配置切面 -->
	<aop:config>
		<!-- 配置切点 -->
		<aop:pointcut expression="execution(* cn.edu.hbpu.bookstore.service.impl.*ServiceImpl.*(..))"
			id="pc"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="pc"/>
	</aop:config>
	<!-- 配置SqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	   <!-- 配置mybatis核心配置文件 -->
	   <property name="configLocation" value="classpath:SqlMapConfig.xml" />
	   <!-- 配置数据源 -->
	<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- Mapper代理的方式开发，扫描包方式配置代理 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	  <!-- 配置Mapper接口 -->
	  <property name="basePackage" value="cn.edu.hbpu.bookstore.mapper" />
	
	
	
	</bean>
	
	<!--<bean name="myAdvice" class="cn.edu.hupu.shop.test.MyAdvice"></bean>
	<aop:config>
		<aop:pointcut expression="execution(* cn.edu.hbpu.shop.service.impl.*ServiceImpl.*(..))" id="pc"/>
		<aop:aspect ref="myAdvice">
		 前置通知方法 
		<aop:before method="before" pointcut-ref="pc"/>
		 方法返回后置通知方法(遇到异常不执行) 
		<aop:after-returning method="afterReturn" pointcut-ref="pc"/>
		 环绕通知方法(方法执行前后均执行) 
		<aop:around method="around" pointcut-ref="pc"/>
		 异常跑出通知方法
		<aop:after-throwing method="throwExe" pointcut-ref="pc"/>
		 方法返回后置通知方法(遇到异常也会执行) 
		<aop:after method="afterAll" pointcut-ref="pc"/>		
		</aop:aspect>
	
	</aop:config>
--></beans>
